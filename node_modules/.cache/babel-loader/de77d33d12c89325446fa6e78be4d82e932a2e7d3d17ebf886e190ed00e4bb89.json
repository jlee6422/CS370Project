{"ast":null,"code":"var _jsxFileName = \"/Users/joohalee/Desktop/CS370Project/src/pages/Alarm/Timer.js\",\n  _s = $RefreshSig$();\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport PlayButton from \"./PlayButton\";\nimport PauseButton from \"./PauseButton\";\nimport SettingsButton from \"./SettingsButton\";\nimport { useContext, useState, useEffect, useRef } from \"react\";\nimport SettingsContext from \"./SettingsContext\";\nimport './Timer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst red = '#f54e4e';\nconst green = '#4aec8c';\nfunction Timer() {\n  _s();\n  const {\n    workMinutes,\n    breakMinutes\n  } = useContext(SettingsContext);\n  const settingsInfo = useContext(SettingsContext);\n  const [isPaused, setIsPaused] = useState(true);\n  const [mode, setMode] = useState('work'); // work/break/null\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  const secondsLeftRef = useRef(secondsLeft);\n  const isPausedRef = useRef(isPaused);\n  const modeRef = useRef(mode);\n  function tick() {\n    secondsLeftRef.current--;\n    setSecondsLeft(secondsLeftRef.current);\n    console.log(secondsLeftRef.current);\n  }\n  useEffect(() => {\n    function switchMode() {\n      if (modeRef.current === 'work') settingsInfo.setSessionCount(settingsInfo.sessionCount + 1);\n      const nextMode = modeRef.current === 'work' ? 'break' : 'work';\n      const nextSeconds = (nextMode === 'work' ? settingsInfo.workMinutes : settingsInfo.breakMinutes) * 60;\n      setMode(nextMode);\n      modeRef.current = nextMode;\n      setSecondsLeft(nextSeconds);\n      secondsLeftRef.current = nextSeconds;\n    }\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n    const interval = setInterval(() => {\n      if (isPausedRef.current) {\n        return;\n      }\n      if (secondsLeftRef.current === 0) {\n        return switchMode();\n      }\n      tick();\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [settingsInfo]);\n  const totalSeconds = mode === 'work' ? settingsInfo.workMinutes * 60 : settingsInfo.breakMinutes * 60;\n  const percentage = Math.round(secondsLeft / totalSeconds * 100);\n  const minutes = Math.floor(secondsLeft / 60);\n  let seconds = secondsLeft % 60;\n  if (seconds < 10) seconds = '0' + seconds;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"progressbar-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progressbar-content\",\n      children: [/*#__PURE__*/_jsxDEV(CircularProgressbar, {\n        value: percentage,\n        text: minutes + ':' + seconds,\n        styles: buildStyles({\n          textColor: '#fff',\n          pathColor: mode === 'work' ? red : green,\n          tailColor: 'rgba(255,255,255,.2)'\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '20px'\n        },\n        children: isPaused ? /*#__PURE__*/_jsxDEV(PlayButton, {\n          onClick: () => {\n            setIsPaused(false);\n            isPausedRef.current = false;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(PauseButton, {\n          onClick: () => {\n            setIsPaused(true);\n            isPausedRef.current = true;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '20px'\n        },\n        children: /*#__PURE__*/_jsxDEV(SettingsButton, {\n          onClick: () => settingsInfo.setShowSettings(true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(Timer, \"eqCpPeOIwgx3fUDhT30Qj4u8iG8=\");\n_c = Timer;\nexport default Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["CircularProgressbar","buildStyles","PlayButton","PauseButton","SettingsButton","useContext","useState","useEffect","useRef","SettingsContext","jsxDEV","_jsxDEV","red","green","Timer","_s","workMinutes","breakMinutes","settingsInfo","isPaused","setIsPaused","mode","setMode","secondsLeft","setSecondsLeft","secondsLeftRef","isPausedRef","modeRef","tick","current","console","log","switchMode","setSessionCount","sessionCount","nextMode","nextSeconds","interval","setInterval","clearInterval","totalSeconds","percentage","Math","round","minutes","floor","seconds","className","children","value","text","styles","textColor","pathColor","tailColor","fileName","_jsxFileName","lineNumber","columnNumber","style","marginTop","onClick","setShowSettings","_c","$RefreshReg$"],"sources":["/Users/joohalee/Desktop/CS370Project/src/pages/Alarm/Timer.js"],"sourcesContent":["import { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport PlayButton from \"./PlayButton\";\nimport PauseButton from \"./PauseButton\";\nimport SettingsButton from \"./SettingsButton\";\nimport {useContext, useState, useEffect, useRef} from \"react\";\nimport SettingsContext from \"./SettingsContext\";\nimport './Timer.css';\n\nconst red = '#f54e4e';\nconst green = '#4aec8c';\n\nfunction Timer() {\n  const { workMinutes, breakMinutes } = useContext(SettingsContext);\n  const settingsInfo = useContext(SettingsContext);\n\n  const [isPaused, setIsPaused] = useState(true);\n  const [mode, setMode] = useState('work'); // work/break/null\n  const [secondsLeft, setSecondsLeft] = useState(0);\n\n  const secondsLeftRef = useRef(secondsLeft);\n  const isPausedRef = useRef(isPaused);\n  const modeRef = useRef(mode);\n\n  function tick() {\n    secondsLeftRef.current--;\n    setSecondsLeft(secondsLeftRef.current);\n    console.log(secondsLeftRef.current)\n  }\n\n  useEffect(() => {\n\n    function switchMode() {\n      if (modeRef.current === 'work') settingsInfo.setSessionCount(settingsInfo.sessionCount + 1)\n      \n      const nextMode = modeRef.current === 'work' ? 'break' : 'work';\n      const nextSeconds = (nextMode === 'work' ? settingsInfo.workMinutes : settingsInfo.breakMinutes) * 60;\n\n      setMode(nextMode);\n      modeRef.current = nextMode;\n\n      setSecondsLeft(nextSeconds);\n      secondsLeftRef.current = nextSeconds;\n    }\n\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n\n    const interval = setInterval(() => {\n      if (isPausedRef.current) {\n        return;\n      }\n      if (secondsLeftRef.current === 0) {\n        return switchMode();\n      }\n\n      tick();\n    },1000);\n\n    return () => clearInterval(interval);\n  }, [settingsInfo]);\n\n  const totalSeconds = mode === 'work'\n    ? settingsInfo.workMinutes * 60\n    : settingsInfo.breakMinutes * 60;\n  const percentage = Math.round(secondsLeft / totalSeconds * 100);\n\n  const minutes = Math.floor(secondsLeft / 60);\n  let seconds = secondsLeft % 60;\n  if(seconds < 10) seconds = '0'+seconds;\n\n  return (\n    <div className=\"progressbar-container\">\n      <div className=\"progressbar-content\">\n      <CircularProgressbar\n        value={percentage}\n        text={minutes + ':' + seconds}\n        styles={buildStyles({\n        textColor:'#fff',\n        pathColor:mode === 'work' ? red : green,\n        tailColor:'rgba(255,255,255,.2)',\n      })} />\n      <div style={{marginTop:'20px'}}>\n        {isPaused\n          ? <PlayButton onClick={() => { setIsPaused(false); isPausedRef.current = false; }} />\n          : <PauseButton onClick={() => { setIsPaused(true); isPausedRef.current = true; }} />}\n      </div>\n      <div style={{marginTop:'20px'}}>\n        <SettingsButton onClick={() => settingsInfo.setShowSettings(true)} />\n      </div>\n    </div>\n    </div>\n  );\n}\n\nexport default Timer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}