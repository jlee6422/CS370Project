{"ast":null,"code":"var _jsxFileName = \"/Users/raphaelpalacio/Documents/GitHub/CS370Project/src/pages/Alarm/Timer.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState, useEffect, useRef } from \"react\";\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport PlayButton from \"./PlayButton\";\nimport PauseButton from \"./PauseButton\";\nimport SettingsButton from \"./SettingsButton\";\nimport SettingsContext from \"./SettingsContext\";\nimport './Timer.css';\n\n// Constants\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst purple = '#800080';\nconst green = '#4aec8c';\nfunction Timer() {\n  _s();\n  // State and Refs\n  const settingsInfo = useContext(SettingsContext);\n  const [stop, setStop] = useState(true);\n  const [mode, setMode] = useState('work');\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  const secondsLeftRef = useRef(secondsLeft);\n  const stopRef = useRef(stop);\n  const modeRef = useRef(mode);\n  useEffect(() => {\n    // Load timer state from localStorage if available\n    const timerState = JSON.parse(localStorage.getItem('timerState'));\n    if (timerState) {\n      setStop(timerState.stop);\n      setMode(timerState.mode);\n      setSecondsLeft(timerState.secondsLeft);\n      stopRef.current = timerState.stop;\n      modeRef.current = timerState.mode;\n      secondsLeftRef.current = timerState.secondsLeft;\n    }\n  }, []);\n  useEffect(() => {\n    // Save timer state to localStorage\n    localStorage.setItem('timerState', JSON.stringify({\n      stop,\n      mode,\n      secondsLeft\n    }));\n  }, [stop, mode, secondsLeft]);\n\n  // Effects\n  useEffect(() => {\n    const calculateNextMode = () => {\n      if (modeRef.current === 'work') {\n        settingsInfo.setSessionCount(prevCount => prevCount + 1);\n      }\n      const nextMode = modeRef.current === 'work' ? 'break' : 'work';\n      const nextSeconds = (nextMode === 'work' ? settingsInfo.workMinutes : settingsInfo.breakMinutes) * 60;\n      setMode(nextMode);\n      modeRef.current = nextMode;\n      setSecondsLeft(nextSeconds);\n      secondsLeftRef.current = nextSeconds;\n    };\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n    const interval = setInterval(() => {\n      if (!stopRef.current) {\n        if (secondsLeftRef.current === 0) {\n          calculateNextMode();\n        } else {\n          secondsLeftRef.current--;\n          setSecondsLeft(secondsLeftRef.current);\n        }\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [settingsInfo, stopRef, modeRef, secondsLeftRef]);\n\n  // Calculations\n  const totalSeconds = mode === 'work' ? settingsInfo.workMinutes * 60 : settingsInfo.breakMinutes * 60;\n  const percentage = Math.round(secondsLeft / totalSeconds * 100);\n  const minutes = Math.floor(secondsLeft / 60);\n  let seconds = secondsLeft % 60;\n  if (seconds < 10) seconds = '0' + seconds;\n\n  // Render\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timer-container\",\n    style: {\n      marginTop: '70px'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progressbar-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progressbar-content\",\n        children: [/*#__PURE__*/_jsxDEV(CircularProgressbar, {\n          value: percentage,\n          text: `${minutes}:${seconds}`,\n          styles: buildStyles({\n            textColor: '#fff',\n            pathColor: mode === 'work' ? purple : green,\n            tailColor: 'rgba(255,255,255,.2)'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '30px'\n          },\n          children: stop ? /*#__PURE__*/_jsxDEV(PlayButton, {\n            onClick: () => {\n              setStop(false);\n              stopRef.current = false;\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(PauseButton, {\n            onClick: () => {\n              setStop(true);\n              stopRef.current = true;\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '1px'\n          },\n          children: /*#__PURE__*/_jsxDEV(SettingsButton, {\n            onClick: () => settingsInfo.setShowSettings(true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n_s(Timer, \"dnEDsTVG9aVkaqBuc6rIB42tNmA=\");\n_c = Timer;\nexport default Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["React","useContext","useState","useEffect","useRef","CircularProgressbar","buildStyles","PlayButton","PauseButton","SettingsButton","SettingsContext","jsxDEV","_jsxDEV","purple","green","Timer","_s","settingsInfo","stop","setStop","mode","setMode","secondsLeft","setSecondsLeft","secondsLeftRef","stopRef","modeRef","timerState","JSON","parse","localStorage","getItem","current","setItem","stringify","calculateNextMode","setSessionCount","prevCount","nextMode","nextSeconds","workMinutes","breakMinutes","interval","setInterval","clearInterval","totalSeconds","percentage","Math","round","minutes","floor","seconds","className","style","marginTop","children","value","text","styles","textColor","pathColor","tailColor","fileName","_jsxFileName","lineNumber","columnNumber","onClick","setShowSettings","_c","$RefreshReg$"],"sources":["/Users/raphaelpalacio/Documents/GitHub/CS370Project/src/pages/Alarm/Timer.js"],"sourcesContent":["import React, { useContext, useState, useEffect, useRef } from \"react\";\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport PlayButton from \"./PlayButton\";\nimport PauseButton from \"./PauseButton\";\nimport SettingsButton from \"./SettingsButton\";\nimport SettingsContext from \"./SettingsContext\";\nimport './Timer.css';\n\n// Constants\nconst purple = '#800080';\nconst green = '#4aec8c';\n\nfunction Timer() {\n  // State and Refs\n  const settingsInfo = useContext(SettingsContext);\n  const [stop, setStop] = useState(true);\n  const [mode, setMode] = useState('work');\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  const secondsLeftRef = useRef(secondsLeft);\n  const stopRef = useRef(stop);\n  const modeRef = useRef(mode);\n\n  useEffect(() => {\n    // Load timer state from localStorage if available\n    const timerState = JSON.parse(localStorage.getItem('timerState'));\n    if (timerState) {\n      setStop(timerState.stop);\n      setMode(timerState.mode);\n      setSecondsLeft(timerState.secondsLeft);\n      stopRef.current = timerState.stop;\n      modeRef.current = timerState.mode;\n      secondsLeftRef.current = timerState.secondsLeft;\n    }\n  }, []);\n\n  useEffect(() => {\n    // Save timer state to localStorage\n    localStorage.setItem('timerState', JSON.stringify({ stop, mode, secondsLeft }));\n  }, [stop, mode, secondsLeft]);\n\n  // Effects\n  useEffect(() => {\n    const calculateNextMode = () => {\n      if (modeRef.current === 'work') {\n        settingsInfo.setSessionCount(prevCount => prevCount + 1);\n      }\n\n      const nextMode = modeRef.current === 'work' ? 'break' : 'work';\n      const nextSeconds = (nextMode === 'work' ? settingsInfo.workMinutes : settingsInfo.breakMinutes) * 60;\n\n      setMode(nextMode);\n      modeRef.current = nextMode;\n\n      setSecondsLeft(nextSeconds);\n      secondsLeftRef.current = nextSeconds;\n    };\n\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n\n    const interval = setInterval(() => {\n      if (!stopRef.current) {\n        if (secondsLeftRef.current === 0) {\n          calculateNextMode();\n        } else {\n          secondsLeftRef.current--;\n          setSecondsLeft(secondsLeftRef.current);\n        }\n      }\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [settingsInfo, stopRef, modeRef, secondsLeftRef]);\n\n  // Calculations\n  const totalSeconds = mode === 'work'\n    ? settingsInfo.workMinutes * 60\n    : settingsInfo.breakMinutes * 60;\n  const percentage = Math.round(secondsLeft / totalSeconds * 100);\n  const minutes = Math.floor(secondsLeft / 60);\n  let seconds = secondsLeft % 60;\n  if (seconds < 10) seconds = '0' + seconds;\n\n  // Render\n  return (\n    <div className=\"timer-container\" style={{ marginTop: '70px' }}>\n      <div className=\"progressbar-container\">\n        <div className=\"progressbar-content\">\n          <CircularProgressbar\n            value={percentage}\n            text={`${minutes}:${seconds}`}\n            styles={buildStyles({\n              textColor: '#fff',\n              pathColor: mode === 'work' ? purple : green,\n              tailColor: 'rgba(255,255,255,.2)',\n            })}\n          />\n          <div style={{ marginTop: '30px' }}>\n            {stop\n              ? <PlayButton onClick={() => { setStop(false); stopRef.current = false; }} />\n              : <PauseButton onClick={() => { setStop(true); stopRef.current = true; }} />}\n          </div>\n          <div style={{ marginTop: '1px' }}>\n            <SettingsButton onClick={() => settingsInfo.setShowSettings(true)} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Timer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}