{"ast":null,"code":"var _jsxFileName = \"/Users/joohalee/Desktop/alarm/react-pomodoro-timer-master/src/Timer.js\",\n  _s = $RefreshSig$();\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport PlayButton from \"./PlayButton\";\nimport PauseButton from \"./PauseButton\";\nimport SettingsButton from \"./SettingsButton\";\nimport { useContext, useState, useEffect, useRef } from \"react\";\nimport SettingsContext from \"./SettingsContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst red = '#f54e4e';\nconst green = '#4aec8c';\nfunction Timer() {\n  _s();\n  const settingsInfo = useContext(SettingsContext);\n  const [isPaused, setIsPaused] = useState(true);\n  const [mode, setMode] = useState('work'); // work/break/null\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  const secondsLeftRef = useRef(secondsLeft);\n  const isPausedRef = useRef(isPaused);\n  const modeRef = useRef(mode);\n  function tick() {\n    secondsLeftRef.current--;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n  useEffect(() => {\n    function switchMode() {\n      const nextMode = modeRef.current === 'work' ? 'break' : 'work';\n      const nextSeconds = (nextMode === 'work' ? settingsInfo.workMinutes : settingsInfo.breakMinutes) * 60;\n      setMode(nextMode);\n      modeRef.current = nextMode;\n      setSecondsLeft(nextSeconds);\n      secondsLeftRef.current = nextSeconds;\n    }\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n    const interval = setInterval(() => {\n      if (isPausedRef.current) {\n        return;\n      }\n      if (secondsLeftRef.current === 0) {\n        return switchMode();\n      }\n      tick();\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [settingsInfo]);\n  const totalSeconds = mode === 'work' ? settingsInfo.workMinutes * 60 : settingsInfo.breakMinutes * 60;\n  const percentage = Math.round(secondsLeft / totalSeconds * 100);\n  const minutes = Math.floor(secondsLeft / 60);\n  let seconds = secondsLeft % 60;\n  if (seconds < 10) seconds = '0' + seconds;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CircularProgressbar, {\n      value: percentage,\n      text: minutes + ':' + seconds,\n      styles: buildStyles({\n        textColor: '#fff',\n        pathColor: mode === 'work' ? red : green,\n        tailColor: 'rgba(255,255,255,.2)'\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: isPaused ? /*#__PURE__*/_jsxDEV(PlayButton, {\n        onClick: () => {\n          setIsPaused(false);\n          isPausedRef.current = false;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(PauseButton, {\n        onClick: () => {\n          setIsPaused(true);\n          isPausedRef.current = true;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(SettingsButton, {\n        onClick: () => settingsInfo.setShowSettings(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(Timer, \"wLsOXioxHyC+0a8S06ETGdtL+3A=\");\n_c = Timer;\nexport default Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["CircularProgressbar","buildStyles","PlayButton","PauseButton","SettingsButton","useContext","useState","useEffect","useRef","SettingsContext","jsxDEV","_jsxDEV","red","green","Timer","_s","settingsInfo","isPaused","setIsPaused","mode","setMode","secondsLeft","setSecondsLeft","secondsLeftRef","isPausedRef","modeRef","tick","current","switchMode","nextMode","nextSeconds","workMinutes","breakMinutes","interval","setInterval","clearInterval","totalSeconds","percentage","Math","round","minutes","floor","seconds","children","value","text","styles","textColor","pathColor","tailColor","fileName","_jsxFileName","lineNumber","columnNumber","style","marginTop","onClick","setShowSettings","_c","$RefreshReg$"],"sources":["/Users/joohalee/Desktop/alarm/react-pomodoro-timer-master/src/Timer.js"],"sourcesContent":["import { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport PlayButton from \"./PlayButton\";\nimport PauseButton from \"./PauseButton\";\nimport SettingsButton from \"./SettingsButton\";\nimport {useContext, useState, useEffect, useRef} from \"react\";\nimport SettingsContext from \"./SettingsContext\";\n\nconst red = '#f54e4e';\nconst green = '#4aec8c';\n\nfunction Timer() {\n  const settingsInfo = useContext(SettingsContext);\n\n  const [isPaused, setIsPaused] = useState(true);\n  const [mode, setMode] = useState('work'); // work/break/null\n  const [secondsLeft, setSecondsLeft] = useState(0);\n\n  const secondsLeftRef = useRef(secondsLeft);\n  const isPausedRef = useRef(isPaused);\n  const modeRef = useRef(mode);\n\n  function tick() {\n    secondsLeftRef.current--;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n\n  useEffect(() => {\n\n    function switchMode() {\n      const nextMode = modeRef.current === 'work' ? 'break' : 'work';\n      const nextSeconds = (nextMode === 'work' ? settingsInfo.workMinutes : settingsInfo.breakMinutes) * 60;\n\n      setMode(nextMode);\n      modeRef.current = nextMode;\n\n      setSecondsLeft(nextSeconds);\n      secondsLeftRef.current = nextSeconds;\n    }\n\n    secondsLeftRef.current = settingsInfo.workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n\n    const interval = setInterval(() => {\n      if (isPausedRef.current) {\n        return;\n      }\n      if (secondsLeftRef.current === 0) {\n        return switchMode();\n      }\n\n      tick();\n    },1000);\n\n    return () => clearInterval(interval);\n  }, [settingsInfo]);\n\n  const totalSeconds = mode === 'work'\n    ? settingsInfo.workMinutes * 60\n    : settingsInfo.breakMinutes * 60;\n  const percentage = Math.round(secondsLeft / totalSeconds * 100);\n\n  const minutes = Math.floor(secondsLeft / 60);\n  let seconds = secondsLeft % 60;\n  if(seconds < 10) seconds = '0'+seconds;\n\n  return (\n    <div>\n      <CircularProgressbar\n        value={percentage}\n        text={minutes + ':' + seconds}\n        styles={buildStyles({\n        textColor:'#fff',\n        pathColor:mode === 'work' ? red : green,\n        tailColor:'rgba(255,255,255,.2)',\n      })} />\n      <div style={{marginTop:'20px'}}>\n        {isPaused\n          ? <PlayButton onClick={() => { setIsPaused(false); isPausedRef.current = false; }} />\n          : <PauseButton onClick={() => { setIsPaused(true); isPausedRef.current = true; }} />}\n      </div>\n      <div style={{marginTop:'20px'}}>\n        <SettingsButton onClick={() => settingsInfo.setShowSettings(true)} />\n      </div>\n    </div>\n  );\n}\n\nexport default Timer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}